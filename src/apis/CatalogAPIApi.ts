/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommitTableRequest,
  CommitTableResponse,
  CreateNamespaceRequest,
  CreateNamespaceResponse,
  CreateTableRequest,
  ErrorModel,
  GetNamespaceResponse,
  ListNamespacesResponse,
  ListTablesResponse,
  LoadTableResult,
  RenameTableRequest,
  ReportMetricsRequest,
  UpdateNamespacePropertiesRequest,
  UpdateNamespacePropertiesResponse,
} from '../models';
import {
    CommitTableRequestFromJSON,
    CommitTableRequestToJSON,
    CommitTableResponseFromJSON,
    CommitTableResponseToJSON,
    CreateNamespaceRequestFromJSON,
    CreateNamespaceRequestToJSON,
    CreateNamespaceResponseFromJSON,
    CreateNamespaceResponseToJSON,
    CreateTableRequestFromJSON,
    CreateTableRequestToJSON,
    ErrorModelFromJSON,
    ErrorModelToJSON,
    GetNamespaceResponseFromJSON,
    GetNamespaceResponseToJSON,
    ListNamespacesResponseFromJSON,
    ListNamespacesResponseToJSON,
    ListTablesResponseFromJSON,
    ListTablesResponseToJSON,
    LoadTableResultFromJSON,
    LoadTableResultToJSON,
    RenameTableRequestFromJSON,
    RenameTableRequestToJSON,
    ReportMetricsRequestFromJSON,
    ReportMetricsRequestToJSON,
    UpdateNamespacePropertiesRequestFromJSON,
    UpdateNamespacePropertiesRequestToJSON,
    UpdateNamespacePropertiesResponseFromJSON,
    UpdateNamespacePropertiesResponseToJSON,
} from '../models';

export interface CreateNamespaceOperationRequest {
    prefix: string;
    createNamespaceRequest?: CreateNamespaceRequest;
}

export interface CreateTableOperationRequest {
    prefix: string;
    namespace: string;
    createTableRequest?: CreateTableRequest;
}

export interface DropNamespaceRequest {
    prefix: string;
    namespace: string;
}

export interface DropTableRequest {
    prefix: string;
    namespace: string;
    table: string;
    purgeRequested?: boolean;
}

export interface ListNamespacesRequest {
    prefix: string;
    parent?: string;
}

export interface ListTablesRequest {
    prefix: string;
    namespace: string;
}

export interface LoadNamespaceMetadataRequest {
    prefix: string;
    namespace: string;
}

export interface LoadTableRequest {
    prefix: string;
    namespace: string;
    table: string;
    snapshots?: LoadTableSnapshotsEnum;
}

export interface RenameTableOperationRequest {
    prefix: string;
    renameTableRequest: RenameTableRequest;
}

export interface ReportMetricsOperationRequest {
    prefix: string;
    namespace: string;
    table: string;
    reportMetricsRequest: ReportMetricsRequest;
}

export interface TableExistsRequest {
    prefix: string;
    namespace: string;
    table: string;
}

export interface UpdatePropertiesRequest {
    prefix: string;
    namespace: string;
    updateNamespacePropertiesRequest?: UpdateNamespacePropertiesRequest;
}

export interface UpdateTableRequest {
    prefix: string;
    namespace: string;
    table: string;
    commitTableRequest?: CommitTableRequest;
}

/**
 * 
 */
export class CatalogAPIApi extends runtime.BaseAPI {

    /**
     * Create a namespace, with an optional set of properties. The server might also add properties, such as `last_modified_time` etc.
     * Create a namespace
     */
    async createNamespaceRaw(requestParameters: CreateNamespaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateNamespaceResponse>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling createNamespace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNamespaceRequestToJSON(requestParameters.createNamespaceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNamespaceResponseFromJSON(jsonValue));
    }

    /**
     * Create a namespace, with an optional set of properties. The server might also add properties, such as `last_modified_time` etc.
     * Create a namespace
     */
    async createNamespace(requestParameters: CreateNamespaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateNamespaceResponse> {
        const response = await this.createNamespaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a table or start a create transaction, like atomic CTAS.  If `stage-create` is false, the table is created immediately.  If `stage-create` is true, the table is not created, but table metadata is initialized and returned. The service should prepare as needed for a commit to the table commit endpoint to complete the create transaction. The client uses the returned metadata to begin a transaction. To commit the transaction, the client sends all create and subsequent changes to the table commit route. Changes from the table create operation include changes like AddSchemaUpdate and SetCurrentSchemaUpdate that set the initial table state.
     * Create a table in the given namespace
     */
    async createTableRaw(requestParameters: CreateTableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoadTableResult>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling createTable.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}/tables`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTableRequestToJSON(requestParameters.createTableRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoadTableResultFromJSON(jsonValue));
    }

    /**
     * Create a table or start a create transaction, like atomic CTAS.  If `stage-create` is false, the table is created immediately.  If `stage-create` is true, the table is not created, but table metadata is initialized and returned. The service should prepare as needed for a commit to the table commit endpoint to complete the create transaction. The client uses the returned metadata to begin a transaction. To commit the transaction, the client sends all create and subsequent changes to the table commit route. Changes from the table create operation include changes like AddSchemaUpdate and SetCurrentSchemaUpdate that set the initial table state.
     * Create a table in the given namespace
     */
    async createTable(requestParameters: CreateTableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoadTableResult> {
        const response = await this.createTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Drop a namespace from the catalog. Namespace must be empty.
     */
    async dropNamespaceRaw(requestParameters: DropNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling dropNamespace.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling dropNamespace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Drop a namespace from the catalog. Namespace must be empty.
     */
    async dropNamespace(requestParameters: DropNamespaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dropNamespaceRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a table from the catalog
     * Drop a table from the catalog
     */
    async dropTableRaw(requestParameters: DropTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling dropTable.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling dropTable.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling dropTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.purgeRequested !== undefined) {
            queryParameters['purgeRequested'] = requestParameters.purgeRequested;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}/tables/{table}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a table from the catalog
     * Drop a table from the catalog
     */
    async dropTable(requestParameters: DropTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.dropTableRaw(requestParameters, initOverrides);
    }

    /**
     * List all namespaces at a certain level, optionally starting from a given parent namespace. If table accounting.tax.paid.info exists, using \'SELECT NAMESPACE IN accounting\' would translate into `GET /namespaces?parent=accounting` and must return a namespace, [\"accounting\", \"tax\"] only. Using \'SELECT NAMESPACE IN accounting.tax\' would translate into `GET /namespaces?parent=accounting%1Ftax` and must return a namespace, [\"accounting\", \"tax\", \"paid\"]. If `parent` is not provided, all top-level namespaces should be listed.
     * List namespaces, optionally providing a parent namespace to list underneath
     */
    async listNamespacesRaw(requestParameters: ListNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListNamespacesResponse>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling listNamespaces.');
        }

        const queryParameters: any = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListNamespacesResponseFromJSON(jsonValue));
    }

    /**
     * List all namespaces at a certain level, optionally starting from a given parent namespace. If table accounting.tax.paid.info exists, using \'SELECT NAMESPACE IN accounting\' would translate into `GET /namespaces?parent=accounting` and must return a namespace, [\"accounting\", \"tax\"] only. Using \'SELECT NAMESPACE IN accounting.tax\' would translate into `GET /namespaces?parent=accounting%1Ftax` and must return a namespace, [\"accounting\", \"tax\", \"paid\"]. If `parent` is not provided, all top-level namespaces should be listed.
     * List namespaces, optionally providing a parent namespace to list underneath
     */
    async listNamespaces(requestParameters: ListNamespacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListNamespacesResponse> {
        const response = await this.listNamespacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return all table identifiers under this namespace
     * List all table identifiers underneath a given namespace
     */
    async listTablesRaw(requestParameters: ListTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTablesResponse>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling listTables.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listTables.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}/tables`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTablesResponseFromJSON(jsonValue));
    }

    /**
     * Return all table identifiers under this namespace
     * List all table identifiers underneath a given namespace
     */
    async listTables(requestParameters: ListTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTablesResponse> {
        const response = await this.listTablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return all stored metadata properties for a given namespace
     * Load the metadata properties for a namespace
     */
    async loadNamespaceMetadataRaw(requestParameters: LoadNamespaceMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNamespaceResponse>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling loadNamespaceMetadata.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling loadNamespaceMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNamespaceResponseFromJSON(jsonValue));
    }

    /**
     * Return all stored metadata properties for a given namespace
     * Load the metadata properties for a namespace
     */
    async loadNamespaceMetadata(requestParameters: LoadNamespaceMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNamespaceResponse> {
        const response = await this.loadNamespaceMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a table from the catalog.  The response contains both configuration and table metadata. The configuration, if non-empty is used as additional configuration for the table that overrides catalog configuration. For example, this configuration may change the FileIO implementation to be used for the table.  The response also contains the table\'s full metadata, matching the table metadata JSON file.  The catalog configuration may contain credentials that should be used for subsequent requests for the table. The configuration key \"token\" is used to pass an access token to be used as a bearer token for table requests. Otherwise, a token may be passed using a RFC 8693 token type as a configuration key. For example, \"urn:ietf:params:oauth:token-type:jwt=<JWT-token>\".
     * Load a table from the catalog
     */
    async loadTableRaw(requestParameters: LoadTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoadTableResult>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling loadTable.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling loadTable.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling loadTable.');
        }

        const queryParameters: any = {};

        if (requestParameters.snapshots !== undefined) {
            queryParameters['snapshots'] = requestParameters.snapshots;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}/tables/{table}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoadTableResultFromJSON(jsonValue));
    }

    /**
     * Load a table from the catalog.  The response contains both configuration and table metadata. The configuration, if non-empty is used as additional configuration for the table that overrides catalog configuration. For example, this configuration may change the FileIO implementation to be used for the table.  The response also contains the table\'s full metadata, matching the table metadata JSON file.  The catalog configuration may contain credentials that should be used for subsequent requests for the table. The configuration key \"token\" is used to pass an access token to be used as a bearer token for table requests. Otherwise, a token may be passed using a RFC 8693 token type as a configuration key. For example, \"urn:ietf:params:oauth:token-type:jwt=<JWT-token>\".
     * Load a table from the catalog
     */
    async loadTable(requestParameters: LoadTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoadTableResult> {
        const response = await this.loadTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename a table from one identifier to another. It\'s valid to move a table across namespaces, but the server implementation is not required to support it.
     * Rename a table from its current name to a new name
     */
    async renameTableRaw(requestParameters: RenameTableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling renameTable.');
        }

        if (requestParameters.renameTableRequest === null || requestParameters.renameTableRequest === undefined) {
            throw new runtime.RequiredError('renameTableRequest','Required parameter requestParameters.renameTableRequest was null or undefined when calling renameTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/tables/rename`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RenameTableRequestToJSON(requestParameters.renameTableRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Rename a table from one identifier to another. It\'s valid to move a table across namespaces, but the server implementation is not required to support it.
     * Rename a table from its current name to a new name
     */
    async renameTable(requestParameters: RenameTableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameTableRaw(requestParameters, initOverrides);
    }

    /**
     * Send a metrics report to this endpoint to be processed by the backend
     */
    async reportMetricsRaw(requestParameters: ReportMetricsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling reportMetrics.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling reportMetrics.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling reportMetrics.');
        }

        if (requestParameters.reportMetricsRequest === null || requestParameters.reportMetricsRequest === undefined) {
            throw new runtime.RequiredError('reportMetricsRequest','Required parameter requestParameters.reportMetricsRequest was null or undefined when calling reportMetrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}/tables/{table}/metrics`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportMetricsRequestToJSON(requestParameters.reportMetricsRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send a metrics report to this endpoint to be processed by the backend
     */
    async reportMetrics(requestParameters: ReportMetricsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reportMetricsRaw(requestParameters, initOverrides);
    }

    /**
     * Check if a table exists within a given namespace. This request does not return a response body.
     * Check if a table exists
     */
    async tableExistsRaw(requestParameters: TableExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling tableExists.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling tableExists.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling tableExists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}/tables/{table}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check if a table exists within a given namespace. This request does not return a response body.
     * Check if a table exists
     */
    async tableExists(requestParameters: TableExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tableExistsRaw(requestParameters, initOverrides);
    }

    /**
     * Set and/or remove properties on a namespace. The request body specifies a list of properties to remove and a map of key value pairs to update. Properties that are not in the request are not modified or removed by this call. Server implementations are not required to support namespace properties.
     * Set or remove properties on a namespace
     */
    async updatePropertiesRaw(requestParameters: UpdatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateNamespacePropertiesResponse>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling updateProperties.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling updateProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}/properties`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNamespacePropertiesRequestToJSON(requestParameters.updateNamespacePropertiesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNamespacePropertiesResponseFromJSON(jsonValue));
    }

    /**
     * Set and/or remove properties on a namespace. The request body specifies a list of properties to remove and a map of key value pairs to update. Properties that are not in the request are not modified or removed by this call. Server implementations are not required to support namespace properties.
     * Set or remove properties on a namespace
     */
    async updateProperties(requestParameters: UpdatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateNamespacePropertiesResponse> {
        const response = await this.updatePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Commit updates to a table.  Commits have two parts, requirements and updates. Requirements are assertions that will be validated before attempting to make and commit changes. For example, `assert-ref-snapshot-id` will check that a named ref\'s snapshot ID has a certain value.  Updates are changes to make to table metadata. For example, after asserting that the current main ref is at the expected snapshot, a commit may add a new child snapshot and set the ref to the new snapshot id.  Create table transactions that are started by createTable with `stage-create` set to true are committed using this route. Transactions should include all changes to the table, including table initialization, like AddSchemaUpdate and SetCurrentSchemaUpdate. The `assert-create` requirement is used to ensure that the table was not created concurrently.
     * Commit updates to a table
     */
    async updateTableRaw(requestParameters: UpdateTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommitTableResponse>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling updateTable.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling updateTable.');
        }

        if (requestParameters.table === null || requestParameters.table === undefined) {
            throw new runtime.RequiredError('table','Required parameter requestParameters.table was null or undefined when calling updateTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["catalog"]);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/{prefix}/namespaces/{namespace}/tables/{table}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"table"}}`, encodeURIComponent(String(requestParameters.table))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommitTableRequestToJSON(requestParameters.commitTableRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitTableResponseFromJSON(jsonValue));
    }

    /**
     * Commit updates to a table.  Commits have two parts, requirements and updates. Requirements are assertions that will be validated before attempting to make and commit changes. For example, `assert-ref-snapshot-id` will check that a named ref\'s snapshot ID has a certain value.  Updates are changes to make to table metadata. For example, after asserting that the current main ref is at the expected snapshot, a commit may add a new child snapshot and set the ref to the new snapshot id.  Create table transactions that are started by createTable with `stage-create` set to true are committed using this route. Transactions should include all changes to the table, including table initialization, like AddSchemaUpdate and SetCurrentSchemaUpdate. The `assert-create` requirement is used to ensure that the table was not created concurrently.
     * Commit updates to a table
     */
    async updateTable(requestParameters: UpdateTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommitTableResponse> {
        const response = await this.updateTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const LoadTableSnapshotsEnum = {
    All: 'all',
    Refs: 'refs'
} as const;
export type LoadTableSnapshotsEnum = typeof LoadTableSnapshotsEnum[keyof typeof LoadTableSnapshotsEnum];
