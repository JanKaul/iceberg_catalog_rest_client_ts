/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StructField } from './StructField';
import {
    StructFieldFromJSON,
    StructFieldFromJSONTyped,
    StructFieldToJSON,
} from './StructField';

/**
 * 
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    type: SchemaTypeEnum;
    /**
     * 
     * @type {Array<StructField>}
     * @memberof Schema
     */
    fields: Array<StructField>;
    /**
     * 
     * @type {number}
     * @memberof Schema
     */
    readonly schemaId?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Schema
     */
    identifierFieldIds?: Array<number>;
}


/**
 * @export
 */
export const SchemaTypeEnum = {
    Struct: 'struct'
} as const;
export type SchemaTypeEnum = typeof SchemaTypeEnum[keyof typeof SchemaTypeEnum];


/**
 * Check if a given object implements the Schema interface.
 */
export function instanceOfSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "fields" in value;

    return isInstance;
}

export function SchemaFromJSON(json: any): Schema {
    return SchemaFromJSONTyped(json, false);
}

export function SchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'fields': ((json['fields'] as Array<any>).map(StructFieldFromJSON)),
        'schemaId': !exists(json, 'schema-id') ? undefined : json['schema-id'],
        'identifierFieldIds': !exists(json, 'identifier-field-ids') ? undefined : json['identifier-field-ids'],
    };
}

export function SchemaToJSON(value?: Schema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'fields': ((value.fields as Array<any>).map(StructFieldToJSON)),
        'identifier-field-ids': value.identifierFieldIds,
    };
}

