/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OAuthError
 */
export interface OAuthError {
    /**
     * 
     * @type {string}
     * @memberof OAuthError
     */
    error: OAuthErrorErrorEnum;
    /**
     * 
     * @type {string}
     * @memberof OAuthError
     */
    errorDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthError
     */
    errorUri?: string;
}


/**
 * @export
 */
export const OAuthErrorErrorEnum = {
    InvalidRequest: 'invalid_request',
    InvalidClient: 'invalid_client',
    InvalidGrant: 'invalid_grant',
    UnauthorizedClient: 'unauthorized_client',
    UnsupportedGrantType: 'unsupported_grant_type',
    InvalidScope: 'invalid_scope'
} as const;
export type OAuthErrorErrorEnum = typeof OAuthErrorErrorEnum[keyof typeof OAuthErrorErrorEnum];


/**
 * Check if a given object implements the OAuthError interface.
 */
export function instanceOfOAuthError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "error" in value;

    return isInstance;
}

export function OAuthErrorFromJSON(json: any): OAuthError {
    return OAuthErrorFromJSONTyped(json, false);
}

export function OAuthErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': json['error'],
        'errorDescription': !exists(json, 'error_description') ? undefined : json['error_description'],
        'errorUri': !exists(json, 'error_uri') ? undefined : json['error_uri'],
    };
}

export function OAuthErrorToJSON(value?: OAuthError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': value.error,
        'error_description': value.errorDescription,
        'error_uri': value.errorUri,
    };
}

