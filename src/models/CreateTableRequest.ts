/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PartitionSpec } from './PartitionSpec';
import {
    PartitionSpecFromJSON,
    PartitionSpecFromJSONTyped,
    PartitionSpecToJSON,
} from './PartitionSpec';
import type { Schema } from './Schema';
import {
    SchemaFromJSON,
    SchemaFromJSONTyped,
    SchemaToJSON,
} from './Schema';
import type { SortOrder } from './SortOrder';
import {
    SortOrderFromJSON,
    SortOrderFromJSONTyped,
    SortOrderToJSON,
} from './SortOrder';

/**
 * 
 * @export
 * @interface CreateTableRequest
 */
export interface CreateTableRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTableRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTableRequest
     */
    location?: string;
    /**
     * 
     * @type {Schema}
     * @memberof CreateTableRequest
     */
    schema: Schema;
    /**
     * 
     * @type {PartitionSpec}
     * @memberof CreateTableRequest
     */
    partitionSpec?: PartitionSpec;
    /**
     * 
     * @type {SortOrder}
     * @memberof CreateTableRequest
     */
    writeOrder?: SortOrder;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTableRequest
     */
    stageCreate?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CreateTableRequest
     */
    properties?: { [key: string]: string; };
}

/**
 * Check if a given object implements the CreateTableRequest interface.
 */
export function instanceOfCreateTableRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "schema" in value;

    return isInstance;
}

export function CreateTableRequestFromJSON(json: any): CreateTableRequest {
    return CreateTableRequestFromJSONTyped(json, false);
}

export function CreateTableRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateTableRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'schema': SchemaFromJSON(json['schema']),
        'partitionSpec': !exists(json, 'partition-spec') ? undefined : PartitionSpecFromJSON(json['partition-spec']),
        'writeOrder': !exists(json, 'write-order') ? undefined : SortOrderFromJSON(json['write-order']),
        'stageCreate': !exists(json, 'stage-create') ? undefined : json['stage-create'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
    };
}

export function CreateTableRequestToJSON(value?: CreateTableRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'location': value.location,
        'schema': SchemaToJSON(value.schema),
        'partition-spec': PartitionSpecToJSON(value.partitionSpec),
        'write-order': SortOrderToJSON(value.writeOrder),
        'stage-create': value.stageCreate,
        'properties': value.properties,
    };
}

