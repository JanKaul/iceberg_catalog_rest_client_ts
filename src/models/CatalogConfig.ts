/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Server-provided configuration for the catalog.
 * @export
 * @interface CatalogConfig
 */
export interface CatalogConfig {
    /**
     * Properties that should be used to override client configuration; applied after defaults and client configuration.
     * @type {{ [key: string]: string; }}
     * @memberof CatalogConfig
     */
    overrides: { [key: string]: string; };
    /**
     * Properties that should be used as default configuration; applied before client configuration.
     * @type {{ [key: string]: string; }}
     * @memberof CatalogConfig
     */
    defaults: { [key: string]: string; };
}

/**
 * Check if a given object implements the CatalogConfig interface.
 */
export function instanceOfCatalogConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "overrides" in value;
    isInstance = isInstance && "defaults" in value;

    return isInstance;
}

export function CatalogConfigFromJSON(json: any): CatalogConfig {
    return CatalogConfigFromJSONTyped(json, false);
}

export function CatalogConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'overrides': json['overrides'],
        'defaults': json['defaults'],
    };
}

export function CatalogConfigToJSON(value?: CatalogConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'overrides': value.overrides,
        'defaults': value.defaults,
    };
}

