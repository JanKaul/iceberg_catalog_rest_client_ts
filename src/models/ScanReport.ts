/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Expression } from './Expression';
import {
    ExpressionFromJSON,
    ExpressionFromJSONTyped,
    ExpressionToJSON,
} from './Expression';
import type { MetricResult } from './MetricResult';
import {
    MetricResultFromJSON,
    MetricResultFromJSONTyped,
    MetricResultToJSON,
} from './MetricResult';

/**
 * 
 * @export
 * @interface ScanReport
 */
export interface ScanReport {
    /**
     * 
     * @type {string}
     * @memberof ScanReport
     */
    tableName: string;
    /**
     * 
     * @type {number}
     * @memberof ScanReport
     */
    snapshotId: number;
    /**
     * 
     * @type {Expression}
     * @memberof ScanReport
     */
    filter: Expression;
    /**
     * 
     * @type {number}
     * @memberof ScanReport
     */
    schemaId: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ScanReport
     */
    projectedFieldIds: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScanReport
     */
    projectedFieldNames: Array<string>;
    /**
     * 
     * @type {{ [key: string]: MetricResult; }}
     * @memberof ScanReport
     */
    metrics: { [key: string]: MetricResult; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ScanReport
     */
    metadata?: { [key: string]: string; };
}

/**
 * Check if a given object implements the ScanReport interface.
 */
export function instanceOfScanReport(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "tableName" in value;
    isInstance = isInstance && "snapshotId" in value;
    isInstance = isInstance && "filter" in value;
    isInstance = isInstance && "schemaId" in value;
    isInstance = isInstance && "projectedFieldIds" in value;
    isInstance = isInstance && "projectedFieldNames" in value;
    isInstance = isInstance && "metrics" in value;

    return isInstance;
}

export function ScanReportFromJSON(json: any): ScanReport {
    return ScanReportFromJSONTyped(json, false);
}

export function ScanReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanReport {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tableName': json['table-name'],
        'snapshotId': json['snapshot-id'],
        'filter': ExpressionFromJSON(json['filter']),
        'schemaId': json['schema-id'],
        'projectedFieldIds': json['projected-field-ids'],
        'projectedFieldNames': json['projected-field-names'],
        'metrics': (mapValues(json['metrics'], MetricResultFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function ScanReportToJSON(value?: ScanReport | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'table-name': value.tableName,
        'snapshot-id': value.snapshotId,
        'filter': ExpressionToJSON(value.filter),
        'schema-id': value.schemaId,
        'projected-field-ids': value.projectedFieldIds,
        'projected-field-names': value.projectedFieldNames,
        'metrics': (mapValues(value.metrics, MetricResultToJSON)),
        'metadata': value.metadata,
    };
}

