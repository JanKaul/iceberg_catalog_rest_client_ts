/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Type } from './Type';
import {
    TypeFromJSON,
    TypeFromJSONTyped,
    TypeToJSON,
} from './Type';

/**
 * 
 * @export
 * @interface MapType
 */
export interface MapType {
    /**
     * 
     * @type {string}
     * @memberof MapType
     */
    type: MapTypeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof MapType
     */
    keyId: number;
    /**
     * 
     * @type {Type}
     * @memberof MapType
     */
    key: Type;
    /**
     * 
     * @type {number}
     * @memberof MapType
     */
    valueId: number;
    /**
     * 
     * @type {Type}
     * @memberof MapType
     */
    value: Type;
    /**
     * 
     * @type {boolean}
     * @memberof MapType
     */
    valueRequired: boolean;
}


/**
 * @export
 */
export const MapTypeTypeEnum = {
    Map: 'map'
} as const;
export type MapTypeTypeEnum = typeof MapTypeTypeEnum[keyof typeof MapTypeTypeEnum];


/**
 * Check if a given object implements the MapType interface.
 */
export function instanceOfMapType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "keyId" in value;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "valueId" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "valueRequired" in value;

    return isInstance;
}

export function MapTypeFromJSON(json: any): MapType {
    return MapTypeFromJSONTyped(json, false);
}

export function MapTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MapType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'keyId': json['key-id'],
        'key': TypeFromJSON(json['key']),
        'valueId': json['value-id'],
        'value': TypeFromJSON(json['value']),
        'valueRequired': json['value-required'],
    };
}

export function MapTypeToJSON(value?: MapType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'key-id': value.keyId,
        'key': TypeToJSON(value.key),
        'value-id': value.valueId,
        'value': TypeToJSON(value.value),
        'value-required': value.valueRequired,
    };
}

