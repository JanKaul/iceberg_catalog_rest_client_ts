/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Assertions from the client that must be valid for the commit to succeed. Assertions are identified by `type` -
 * - `assert-create` - the table must not already exist; used for create transactions
 * - `assert-table-uuid` - the table UUID must match the requirement's `uuid`
 * - `assert-ref-snapshot-id` - the table branch or tag identified by the requirement's `ref` must reference the requirement's `snapshot-id`; if `snapshot-id` is `null` or missing, the ref must not already exist
 * - `assert-last-assigned-field-id` - the table's last assigned column id must match the requirement's `last-assigned-field-id`
 * - `assert-current-schema-id` - the table's current schema id must match the requirement's `current-schema-id`
 * - `assert-last-assigned-partition-id` - the table's last assigned partition id must match the requirement's `last-assigned-partition-id`
 * - `assert-default-spec-id` - the table's default spec id must match the requirement's `default-spec-id`
 * - `assert-default-sort-order-id` - the table's default sort order id must match the requirement's `default-sort-order-id`
 * @export
 * @interface TableRequirement
 */
export interface TableRequirement {
    /**
     * 
     * @type {string}
     * @memberof TableRequirement
     */
    type: TableRequirementTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TableRequirement
     */
    ref?: string;
    /**
     * 
     * @type {string}
     * @memberof TableRequirement
     */
    uuid?: string;
    /**
     * 
     * @type {number}
     * @memberof TableRequirement
     */
    snapshotId?: number;
    /**
     * 
     * @type {number}
     * @memberof TableRequirement
     */
    lastAssignedFieldId?: number;
    /**
     * 
     * @type {number}
     * @memberof TableRequirement
     */
    currentSchemaId?: number;
    /**
     * 
     * @type {number}
     * @memberof TableRequirement
     */
    lastAssignedPartitionId?: number;
    /**
     * 
     * @type {number}
     * @memberof TableRequirement
     */
    defaultSpecId?: number;
    /**
     * 
     * @type {number}
     * @memberof TableRequirement
     */
    defaultSortOrderId?: number;
}


/**
 * @export
 */
export const TableRequirementTypeEnum = {
    Create: 'assert-create',
    TableUuid: 'assert-table-uuid',
    RefSnapshotId: 'assert-ref-snapshot-id',
    LastAssignedFieldId: 'assert-last-assigned-field-id',
    CurrentSchemaId: 'assert-current-schema-id',
    LastAssignedPartitionId: 'assert-last-assigned-partition-id',
    DefaultSpecId: 'assert-default-spec-id',
    DefaultSortOrderId: 'assert-default-sort-order-id'
} as const;
export type TableRequirementTypeEnum = typeof TableRequirementTypeEnum[keyof typeof TableRequirementTypeEnum];


/**
 * Check if a given object implements the TableRequirement interface.
 */
export function instanceOfTableRequirement(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function TableRequirementFromJSON(json: any): TableRequirement {
    return TableRequirementFromJSONTyped(json, false);
}

export function TableRequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): TableRequirement {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'ref': !exists(json, 'ref') ? undefined : json['ref'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'snapshotId': !exists(json, 'snapshot-id') ? undefined : json['snapshot-id'],
        'lastAssignedFieldId': !exists(json, 'last-assigned-field-id') ? undefined : json['last-assigned-field-id'],
        'currentSchemaId': !exists(json, 'current-schema-id') ? undefined : json['current-schema-id'],
        'lastAssignedPartitionId': !exists(json, 'last-assigned-partition-id') ? undefined : json['last-assigned-partition-id'],
        'defaultSpecId': !exists(json, 'default-spec-id') ? undefined : json['default-spec-id'],
        'defaultSortOrderId': !exists(json, 'default-sort-order-id') ? undefined : json['default-sort-order-id'],
    };
}

export function TableRequirementToJSON(value?: TableRequirement | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'ref': value.ref,
        'uuid': value.uuid,
        'snapshot-id': value.snapshotId,
        'last-assigned-field-id': value.lastAssignedFieldId,
        'current-schema-id': value.currentSchemaId,
        'last-assigned-partition-id': value.lastAssignedPartitionId,
        'default-spec-id': value.defaultSpecId,
        'default-sort-order-id': value.defaultSortOrderId,
    };
}

