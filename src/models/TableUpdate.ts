/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddPartitionSpecUpdate } from './AddPartitionSpecUpdate';
import {
    AddPartitionSpecUpdateFromJSON,
    AddPartitionSpecUpdateFromJSONTyped,
    AddPartitionSpecUpdateToJSON,
} from './AddPartitionSpecUpdate';
import type { AddSchemaUpdate } from './AddSchemaUpdate';
import {
    AddSchemaUpdateFromJSON,
    AddSchemaUpdateFromJSONTyped,
    AddSchemaUpdateToJSON,
} from './AddSchemaUpdate';
import type { AddSnapshotUpdate } from './AddSnapshotUpdate';
import {
    AddSnapshotUpdateFromJSON,
    AddSnapshotUpdateFromJSONTyped,
    AddSnapshotUpdateToJSON,
} from './AddSnapshotUpdate';
import type { AddSortOrderUpdate } from './AddSortOrderUpdate';
import {
    AddSortOrderUpdateFromJSON,
    AddSortOrderUpdateFromJSONTyped,
    AddSortOrderUpdateToJSON,
} from './AddSortOrderUpdate';
import type { PartitionSpec } from './PartitionSpec';
import {
    PartitionSpecFromJSON,
    PartitionSpecFromJSONTyped,
    PartitionSpecToJSON,
} from './PartitionSpec';
import type { RemovePropertiesUpdate } from './RemovePropertiesUpdate';
import {
    RemovePropertiesUpdateFromJSON,
    RemovePropertiesUpdateFromJSONTyped,
    RemovePropertiesUpdateToJSON,
} from './RemovePropertiesUpdate';
import type { RemoveSnapshotRefUpdate } from './RemoveSnapshotRefUpdate';
import {
    RemoveSnapshotRefUpdateFromJSON,
    RemoveSnapshotRefUpdateFromJSONTyped,
    RemoveSnapshotRefUpdateToJSON,
} from './RemoveSnapshotRefUpdate';
import type { RemoveSnapshotsUpdate } from './RemoveSnapshotsUpdate';
import {
    RemoveSnapshotsUpdateFromJSON,
    RemoveSnapshotsUpdateFromJSONTyped,
    RemoveSnapshotsUpdateToJSON,
} from './RemoveSnapshotsUpdate';
import type { Schema } from './Schema';
import {
    SchemaFromJSON,
    SchemaFromJSONTyped,
    SchemaToJSON,
} from './Schema';
import type { SetCurrentSchemaUpdate } from './SetCurrentSchemaUpdate';
import {
    SetCurrentSchemaUpdateFromJSON,
    SetCurrentSchemaUpdateFromJSONTyped,
    SetCurrentSchemaUpdateToJSON,
} from './SetCurrentSchemaUpdate';
import type { SetDefaultSortOrderUpdate } from './SetDefaultSortOrderUpdate';
import {
    SetDefaultSortOrderUpdateFromJSON,
    SetDefaultSortOrderUpdateFromJSONTyped,
    SetDefaultSortOrderUpdateToJSON,
} from './SetDefaultSortOrderUpdate';
import type { SetDefaultSpecUpdate } from './SetDefaultSpecUpdate';
import {
    SetDefaultSpecUpdateFromJSON,
    SetDefaultSpecUpdateFromJSONTyped,
    SetDefaultSpecUpdateToJSON,
} from './SetDefaultSpecUpdate';
import type { SetLocationUpdate } from './SetLocationUpdate';
import {
    SetLocationUpdateFromJSON,
    SetLocationUpdateFromJSONTyped,
    SetLocationUpdateToJSON,
} from './SetLocationUpdate';
import type { SetPropertiesUpdate } from './SetPropertiesUpdate';
import {
    SetPropertiesUpdateFromJSON,
    SetPropertiesUpdateFromJSONTyped,
    SetPropertiesUpdateToJSON,
} from './SetPropertiesUpdate';
import type { SetSnapshotRefUpdate } from './SetSnapshotRefUpdate';
import {
    SetSnapshotRefUpdateFromJSON,
    SetSnapshotRefUpdateFromJSONTyped,
    SetSnapshotRefUpdateToJSON,
} from './SetSnapshotRefUpdate';
import type { Snapshot } from './Snapshot';
import {
    SnapshotFromJSON,
    SnapshotFromJSONTyped,
    SnapshotToJSON,
} from './Snapshot';
import type { SortOrder } from './SortOrder';
import {
    SortOrderFromJSON,
    SortOrderFromJSONTyped,
    SortOrderToJSON,
} from './SortOrder';
import type { UpgradeFormatVersionUpdate } from './UpgradeFormatVersionUpdate';
import {
    UpgradeFormatVersionUpdateFromJSON,
    UpgradeFormatVersionUpdateFromJSONTyped,
    UpgradeFormatVersionUpdateToJSON,
} from './UpgradeFormatVersionUpdate';

/**
 * 
 * @export
 * @interface TableUpdate
 */
export interface TableUpdate {
    /**
     * 
     * @type {string}
     * @memberof TableUpdate
     */
    action: TableUpdateActionEnum;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    formatVersion: number;
    /**
     * 
     * @type {Schema}
     * @memberof TableUpdate
     */
    schema: Schema;
    /**
     * Schema ID to set as current, or -1 to set last added schema
     * @type {number}
     * @memberof TableUpdate
     */
    schemaId: number;
    /**
     * 
     * @type {PartitionSpec}
     * @memberof TableUpdate
     */
    spec: PartitionSpec;
    /**
     * Partition spec ID to set as the default, or -1 to set last added spec
     * @type {number}
     * @memberof TableUpdate
     */
    specId: number;
    /**
     * 
     * @type {SortOrder}
     * @memberof TableUpdate
     */
    sortOrder: SortOrder;
    /**
     * Sort order ID to set as the default, or -1 to set last added sort order
     * @type {number}
     * @memberof TableUpdate
     */
    sortOrderId: number;
    /**
     * 
     * @type {Snapshot}
     * @memberof TableUpdate
     */
    snapshot: Snapshot;
    /**
     * 
     * @type {string}
     * @memberof TableUpdate
     */
    type: TableUpdateTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    snapshotId: number;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    maxRefAgeMs?: number;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    maxSnapshotAgeMs?: number;
    /**
     * 
     * @type {number}
     * @memberof TableUpdate
     */
    minSnapshotsToKeep?: number;
    /**
     * 
     * @type {string}
     * @memberof TableUpdate
     */
    refName: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof TableUpdate
     */
    snapshotIds: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof TableUpdate
     */
    location: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TableUpdate
     */
    updates: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof TableUpdate
     */
    removals: Array<string>;
}


/**
 * @export
 */
export const TableUpdateActionEnum = {
    UpgradeFormatVersion: 'upgrade-format-version',
    AddSchema: 'add-schema',
    SetCurrentSchema: 'set-current-schema',
    AddSpec: 'add-spec',
    SetDefaultSpec: 'set-default-spec',
    AddSortOrder: 'add-sort-order',
    SetDefaultSortOrder: 'set-default-sort-order',
    AddSnapshot: 'add-snapshot',
    SetSnapshotRef: 'set-snapshot-ref',
    RemoveSnapshots: 'remove-snapshots',
    RemoveSnapshotRef: 'remove-snapshot-ref',
    SetLocation: 'set-location',
    SetProperties: 'set-properties',
    RemoveProperties: 'remove-properties'
} as const;
export type TableUpdateActionEnum = typeof TableUpdateActionEnum[keyof typeof TableUpdateActionEnum];

/**
 * @export
 */
export const TableUpdateTypeEnum = {
    Tag: 'tag',
    Branch: 'branch'
} as const;
export type TableUpdateTypeEnum = typeof TableUpdateTypeEnum[keyof typeof TableUpdateTypeEnum];


/**
 * Check if a given object implements the TableUpdate interface.
 */
export function instanceOfTableUpdate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "formatVersion" in value;
    isInstance = isInstance && "schema" in value;
    isInstance = isInstance && "schemaId" in value;
    isInstance = isInstance && "spec" in value;
    isInstance = isInstance && "specId" in value;
    isInstance = isInstance && "sortOrder" in value;
    isInstance = isInstance && "sortOrderId" in value;
    isInstance = isInstance && "snapshot" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "snapshotId" in value;
    isInstance = isInstance && "refName" in value;
    isInstance = isInstance && "snapshotIds" in value;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "updates" in value;
    isInstance = isInstance && "removals" in value;

    return isInstance;
}

export function TableUpdateFromJSON(json: any): TableUpdate {
    return TableUpdateFromJSONTyped(json, false);
}

export function TableUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TableUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': json['action'],
        'formatVersion': json['format-version'],
        'schema': SchemaFromJSON(json['schema']),
        'schemaId': json['schema-id'],
        'spec': PartitionSpecFromJSON(json['spec']),
        'specId': json['spec-id'],
        'sortOrder': SortOrderFromJSON(json['sort-order']),
        'sortOrderId': json['sort-order-id'],
        'snapshot': SnapshotFromJSON(json['snapshot']),
        'type': json['type'],
        'snapshotId': json['snapshot-id'],
        'maxRefAgeMs': !exists(json, 'max-ref-age-ms') ? undefined : json['max-ref-age-ms'],
        'maxSnapshotAgeMs': !exists(json, 'max-snapshot-age-ms') ? undefined : json['max-snapshot-age-ms'],
        'minSnapshotsToKeep': !exists(json, 'min-snapshots-to-keep') ? undefined : json['min-snapshots-to-keep'],
        'refName': json['ref-name'],
        'snapshotIds': json['snapshot-ids'],
        'location': json['location'],
        'updates': json['updates'],
        'removals': json['removals'],
    };
}

export function TableUpdateToJSON(value?: TableUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'format-version': value.formatVersion,
        'schema': SchemaToJSON(value.schema),
        'schema-id': value.schemaId,
        'spec': PartitionSpecToJSON(value.spec),
        'spec-id': value.specId,
        'sort-order': SortOrderToJSON(value.sortOrder),
        'sort-order-id': value.sortOrderId,
        'snapshot': SnapshotToJSON(value.snapshot),
        'type': value.type,
        'snapshot-id': value.snapshotId,
        'max-ref-age-ms': value.maxRefAgeMs,
        'max-snapshot-age-ms': value.maxSnapshotAgeMs,
        'min-snapshots-to-keep': value.minSnapshotsToKeep,
        'ref-name': value.refName,
        'snapshot-ids': value.snapshotIds,
        'location': value.location,
        'updates': value.updates,
        'removals': value.removals,
    };
}

