/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    AndOrExpression,
    instanceOfAndOrExpression,
    AndOrExpressionFromJSON,
    AndOrExpressionFromJSONTyped,
    AndOrExpressionToJSON,
} from './AndOrExpression';
import {
    LiteralExpression,
    instanceOfLiteralExpression,
    LiteralExpressionFromJSON,
    LiteralExpressionFromJSONTyped,
    LiteralExpressionToJSON,
} from './LiteralExpression';
import {
    NotExpression,
    instanceOfNotExpression,
    NotExpressionFromJSON,
    NotExpressionFromJSONTyped,
    NotExpressionToJSON,
} from './NotExpression';
import {
    SetExpression,
    instanceOfSetExpression,
    SetExpressionFromJSON,
    SetExpressionFromJSONTyped,
    SetExpressionToJSON,
} from './SetExpression';
import {
    UnaryExpression,
    instanceOfUnaryExpression,
    UnaryExpressionFromJSON,
    UnaryExpressionFromJSONTyped,
    UnaryExpressionToJSON,
} from './UnaryExpression';

/**
 * @type Expression
 * 
 * @export
 */
export type Expression = AndOrExpression | LiteralExpression | NotExpression | SetExpression | UnaryExpression;

export function ExpressionFromJSON(json: any): Expression {
    return ExpressionFromJSONTyped(json, false);
}

export function ExpressionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Expression {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return { ...AndOrExpressionFromJSONTyped(json, true), ...LiteralExpressionFromJSONTyped(json, true), ...NotExpressionFromJSONTyped(json, true), ...SetExpressionFromJSONTyped(json, true), ...UnaryExpressionFromJSONTyped(json, true) };
}

export function ExpressionToJSON(value?: Expression | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (instanceOfAndOrExpression(value)) {
        return AndOrExpressionToJSON(value as AndOrExpression);
    }
    if (instanceOfLiteralExpression(value)) {
        return LiteralExpressionToJSON(value as LiteralExpression);
    }
    if (instanceOfNotExpression(value)) {
        return NotExpressionToJSON(value as NotExpression);
    }
    if (instanceOfSetExpression(value)) {
        return SetExpressionToJSON(value as SetExpression);
    }
    if (instanceOfUnaryExpression(value)) {
        return UnaryExpressionToJSON(value as UnaryExpression);
    }

    return {};
}

