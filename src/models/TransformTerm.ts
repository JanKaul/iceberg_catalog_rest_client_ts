/* tslint:disable */
/* eslint-disable */
/**
 * Apache Iceberg REST Catalog API
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransformTerm
 */
export interface TransformTerm {
    /**
     * 
     * @type {string}
     * @memberof TransformTerm
     */
    type: TransformTermTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransformTerm
     */
    transform: string;
    /**
     * 
     * @type {string}
     * @memberof TransformTerm
     */
    term: string;
}


/**
 * @export
 */
export const TransformTermTypeEnum = {
    Transform: 'transform'
} as const;
export type TransformTermTypeEnum = typeof TransformTermTypeEnum[keyof typeof TransformTermTypeEnum];


/**
 * Check if a given object implements the TransformTerm interface.
 */
export function instanceOfTransformTerm(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "transform" in value;
    isInstance = isInstance && "term" in value;

    return isInstance;
}

export function TransformTermFromJSON(json: any): TransformTerm {
    return TransformTermFromJSONTyped(json, false);
}

export function TransformTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransformTerm {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'transform': json['transform'],
        'term': json['term'],
    };
}

export function TransformTermToJSON(value?: TransformTerm | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'transform': value.transform,
        'term': value.term,
    };
}

